import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Eye, Sparkles, RefreshCw } from 'lucide-react';
import { cn } from '@/lib/utils';

interface DelphiOracleProps {
  characterData: any;
}

export const DelphiOracle: React.FC<DelphiOracleProps> = ({ characterData }) => {
  const [currentProphecy, setCurrentProphecy] = useState<string>('');
  const [isRevealing, setIsRevealing] = useState(false);
  
  const prophecyTemplates = [
    "Quando {attribute} for testado, {god} observar√° de perto...",
    "O filho de {god} encontrar√° {challenge} em sua jornada...",
    "Beware quando sua {lowStat} for desafiada, pois {consequence}...",
    "Sua for√ßa em {highStat} ser√° a chave para {opportunity}...",
    "Os ventos sussurram que {god} tem planos para voc√™...",
    "Quando as estrelas se alinharem, sua {skill} ser√° crucial...",
    "O or√°culo prev√™ que {prediction} em tempos sombrios...",
    "Sua conex√£o divina de {connection}% indica que {divineMessage}...",
    "Os fados tecem que {fate} quando menos esperar...",
    "Cuidado com aqueles que subestimam seu {strength}, pois {warning}..."
  ];

  const prophecyElements = {
    challenges: [
      "uma grande trai√ß√£o", "um dilema moral", "uma criatura m√≠tica",
      "um deus irritado", "uma profecia sombria", "um labirinto m√°gico",
      "uma escolha imposs√≠vel", "um sacrif√≠cio necess√°rio"
    ],
    consequences: [
      "isso ser√° sua queda", "mas tamb√©m sua salva√ß√£o", "os deuses intervir√£o",
      "um aliado se revelar√° inimigo", "uma verdade oculta emergir√°",
      "o destino mudar√° seu curso", "um novo poder despertar√°"
    ],
    opportunities: [
      "salvar o Olimpo", "descobrir sua verdadeira origem", "forjar uma lenda",
      "reunir os semideuses", "restaurar o equil√≠brio", "despertar poderes ocultos",
      "conquistar o reconhecimento divino", "proteger os mortais"
    ],
    predictions: [
      "voc√™ encontrar√° seu verdadeiro amor", "um antigo inimigo retornar√°",
      "um segredo familiar ser√° revelado", "voc√™ liderar√° uma grande batalha",
      "uma jornada √©pica o aguarda", "um poder ancestral despertar√°",
      "voc√™ salvar√° quem menos espera", "o imposs√≠vel se tornar√° poss√≠vel"
    ],
    divineMessages: [
      "voc√™ est√° no caminho certo", "maiores desafios est√£o por vir",
      "sua for√ßa interior est√° crescendo", "os deuses est√£o orgulhosos",
      "voc√™ deve confiar em seus instintos", "grandes responsabilidades o aguardam",
      "sua lealdade ser√° testada", "o poder verdadeiro est√° dentro de voc√™"
    ],
    fates: [
      "a vit√≥ria vir√° de onde menos espera", "um sacrif√≠cio mudar√° tudo",
      "o passado retornar√° para ser resolvido", "uma nova alian√ßa se formar√°",
      "o imposs√≠vel se tornar√° sua especialidade", "voc√™ quebrar√° uma maldi√ß√£o antiga"
    ],
    warnings: [
      "sua vingan√ßa ser√° terr√≠vel", "eles despertar√£o a ira divina",
      "o destino os punir√° severamente", "voc√™ provar√° seu valor",
      "os deuses mostrar√£o seu poder atrav√©s de voc√™", "a justi√ßa divina prevalecer√°"
    ]
  };

  const generateProphecy = () => {
    const template = prophecyTemplates[Math.floor(Math.random() * prophecyTemplates.length)];
    
    // Get character stats for personalization
    const stats = {
      strength: characterData.strength || 50,
      dexterity: characterData.dexterity || 50,
      intelligence: characterData.intelligence || 50,
      charisma: characterData.charisma || 50,
      magic: characterData.magic || 50,
      health: characterData.health || 50,
      sanity: characterData.sanity || 50
    };
    
    const statNames = Object.keys(stats);
    const highestStat = statNames.reduce((a, b) => stats[a] > stats[b] ? a : b);
    const lowestStat = statNames.reduce((a, b) => stats[a] < stats[b] ? a : b);
    
    const statLabels = {
      strength: 'For√ßa',
      dexterity: 'Destreza', 
      intelligence: 'Intelig√™ncia',
      charisma: 'Carisma',
      magic: 'Magia',
      health: 'Vitalidade',
      sanity: 'Sanidade'
    };

    const replacements = {
      '{god}': characterData.godName || 'Zeus',
      '{attribute}': statLabels[statNames[Math.floor(Math.random() * statNames.length)]],
      '{highStat}': statLabels[highestStat],
      '{lowStat}': statLabels[lowestStat],
      '{skill}': statLabels[statNames[Math.floor(Math.random() * statNames.length)]],
      '{connection}': characterData.connectionLevel || 50,
      '{challenge}': prophecyElements.challenges[Math.floor(Math.random() * prophecyElements.challenges.length)],
      '{consequence}': prophecyElements.consequences[Math.floor(Math.random() * prophecyElements.consequences.length)],
      '{opportunity}': prophecyElements.opportunities[Math.floor(Math.random() * prophecyElements.opportunities.length)],
      '{prediction}': prophecyElements.predictions[Math.floor(Math.random() * prophecyElements.predictions.length)],
      '{divineMessage}': prophecyElements.divineMessages[Math.floor(Math.random() * prophecyElements.divineMessages.length)],
      '{fate}': prophecyElements.fates[Math.floor(Math.random() * prophecyElements.fates.length)],
      '{warning}': prophecyElements.warnings[Math.floor(Math.random() * prophecyElements.warnings.length)],
      '{strength}': statLabels[highestStat]
    };

    let prophecy = template;
    Object.entries(replacements).forEach(([key, value]) => {
      prophecy = prophecy.replace(new RegExp(key, 'g'), value);
    });

    return prophecy;
  };

  const revealProphecy = () => {
    if (isRevealing) return;
    
    setIsRevealing(true);
    setCurrentProphecy('');
    
    setTimeout(() => {
      const newProphecy = generateProphecy();
      setCurrentProphecy(newProphecy);
      setIsRevealing(false);
    }, 1500);
  };

  useEffect(() => {
    // Generate initial prophecy
    if (!currentProphecy) {
      setCurrentProphecy(generateProphecy());
    }
  }, [characterData]);

  return (
    <div className="card-divine">
      <div className="flex items-center gap-3 mb-6">
        <span className="text-2xl">üîÆ</span>
        <h2 className="text-xl font-cinzel font-bold text-divine-gold">
          Or√°culo de Delfos
        </h2>
        <Eye className="h-5 w-5 text-mystical-purple-bright animate-pulse" />
      </div>

      <Card className={cn(
        "p-6 border-2 transition-all duration-1000 relative overflow-hidden",
        isRevealing 
          ? "border-divine-gold bg-divine-gold/10 animate-pulse" 
          : "border-mystical-purple-bright bg-cosmic-night-light/80"
      )}>
        {/* Mystical background effect */}
        <div className="absolute inset-0 opacity-20">
          <div className="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-mystical-purple-bright/20 via-transparent to-divine-gold/20 animate-pulse" />
        </div>
        
        <div className="relative z-10">
          {isRevealing ? (
            <div className="text-center py-8">
              <Sparkles className="h-12 w-12 mx-auto mb-4 text-divine-gold animate-spin" />
              <p className="text-mystical-purple-bright font-cinzel animate-pulse">
                Os vapores sagrados se erguem...
              </p>
              <p className="text-sm text-papyrus-aged mt-2">
                A P√≠tia consulta os deuses...
              </p>
            </div>
          ) : (
            <div className="text-center">
              <div className="mb-4">
                <span className="text-3xl">üèõÔ∏è</span>
              </div>
              <blockquote className="text-lg font-cinzel text-starlight leading-relaxed mb-4 italic">
                "{currentProphecy}"
              </blockquote>
              <p className="text-xs text-divine-gold font-cinzel">
                ‚Äî Profetisa de Apolo, Or√°culo de Delfos
              </p>
            </div>
          )}
        </div>
      </Card>

      <div className="text-center mt-4">
        <Button
          variant="mystical"
          onClick={revealProphecy}
          disabled={isRevealing}
          className="mb-2"
        >
          <RefreshCw className={cn("h-4 w-4 mr-2", isRevealing && "animate-spin")} />
          Nova Profecia
        </Button>
        
        <p className="text-xs text-papyrus-aged font-cinzel">
          "Conhece-te a ti mesmo" - Inscri√ß√£o no Templo de Apolo
        </p>
      </div>
    </div>
  );
};